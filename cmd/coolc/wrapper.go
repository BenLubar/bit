// Code generated by mkwrapper.go

package main

import . "github.com/BenLubar/bit/bitgen"

// Jump to goto0 if value is ZERO or goto1 if value is ONE.
func (w *writer) Jump(start Line, value Value, goto0, goto1 Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Jump(start, value, goto0, goto1)
	w.n += n
}

// Assign sets left to right.
func (w *writer) Assign(start Line, left, right Value, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Assign(start, left, right, end)
	w.n += n
}

// PrintString writes the bytes in a string, most significant bit first.
func (w *writer) PrintString(start Line, value string, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.PrintString(start, value, end)
	w.n += n
}

// Print writes a byte, most significant bit first.
func (w *writer) Print(start Line, value byte, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Print(start, value, end)
	w.n += n
}

// PrintBit writes a bit to the standard output.
func (w *writer) PrintBit(start Line, value Bit, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.PrintBit(start, value, end)
	w.n += n
}

// Output writes value, most significant bit first.
func (w *writer) Output(start Line, value Integer, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Output(start, value, end)
	w.n += n
}

// OutputBit writes value to the standard output.
func (w *writer) OutputBit(start Line, value Value, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.OutputBit(start, value, end)
	w.n += n
}

// Input reads value, most significant bit first.
func (w *writer) Input(start Line, value Integer, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Input(start, value, end)
	w.n += n
}

// InputBit reads value from the standard input.
func (w *writer) InputBit(start Line, value Value, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.InputBit(start, value, end)
	w.n += n
}

// InputEOF reads value, most significant bit first.
func (w *writer) InputEOF(start Line, value Integer, end, eof Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.InputEOF(start, value, end, eof)
	w.n += n
}

// InputBitEOF reads value from the standard input.
func (w *writer) InputBitEOF(start Line, value Value, end, eof Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.InputBitEOF(start, value, end, eof)
	w.n += n
}

// Cmp jumps to same if value == base or different otherwise.
func (w *writer) Cmp(start Line, value Integer, base uint64, same, different Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Cmp(start, value, base, same, different)
	w.n += n
}

func (w *writer) AddInt(start Line, left, right Integer, end, overflow Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.AddInt(start, left, right, end, overflow)
	w.n += n
}

func (w *writer) Add(start Line, left Integer, right uint64, end, overflow Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Add(start, left, right, end, overflow)
	w.n += n
}

// Increment adds ONE to value, then jumps to end if successful or overflow if
// it needed to carry to a nonexistent bit.
func (w *writer) Increment(start Line, value Integer, end, overflow Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Increment(start, value, end, overflow)
	w.n += n
}

// Decrement subtracts ONE from value, then jumps to end if successful or
// underflow if it needed to borrow from a nonexistent bit.
func (w *writer) Decrement(start Line, value Integer, end, underflow Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Decrement(start, value, end, underflow)
	w.n += n
}

// Copy sets left to right.
func (w *writer) Copy(start Line, left, right Integer, end Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Copy(start, left, right, end)
	w.n += n
}

func (w *writer) Less(start Line, left, right Integer, less, equal, greater Line) {
	if w.err != nil {
		return
	}

	var n int64
	n, w.err = w.Writer.Less(start, left, right, less, equal, greater)
	w.n += n
}
